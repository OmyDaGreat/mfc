name: Build and Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.*'
      - 'LICENSE'
      - '.github/**/*.md'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Kotlin
        uses: fwilhe2/setup-kotlin@v1
        with:
          version: '2.1.21'

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Determine Version
        id: version
        run: |
          # Get the latest tag or default to 0.1.0 if no tags exist
          git fetch --tags
          latest_tag=$(git tag -l "v*" | sort -V | tail -n 1)

          if [ -z "$latest_tag" ]; then
            latest_version="0.1.0"
          else
            latest_version="${latest_tag#v}"
          fi

          # Split version into major, minor, patch
          IFS='.' read -r major minor patch <<< "$latest_version"

          # Bump version based on input or default to patch
          bump_type="${{ github.event.inputs.version_bump || 'patch' }}"

          if [ "$bump_type" == "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$bump_type" == "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          new_version="$major.$minor.$patch"
          echo "New version: $new_version"
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "tag=v$new_version" >> $GITHUB_OUTPUT

      - name: Get latest commit message
        id: commit_message
        run: |
          latest_commit_message=$(git log -1 --pretty=format:%s)
          echo "latest_commit_message=$latest_commit_message" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        id: changelog
        run: |
          # Get the latest tag or use the initial commit if no tags exist
          latest_tag=$(git tag -l "v*" | sort -V | tail -n 1)

          if [ -z "$latest_tag" ]; then
            # If no tags exist, get all commits
            echo "No previous tags found, including all commits in changelog"
            changelog=$(git log --pretty=format:"* %s" --reverse)
          else
            # Get commits since the last tag
            echo "Getting commits since $latest_tag"
            changelog=$(git log ${latest_tag}..HEAD --pretty=format:"* %s" --reverse)

            # If no commits since last tag, add a message
            if [ -z "$changelog" ]; then
              changelog="No changes since last release"
            fi
          fi

          # Escape newlines for GitHub Actions output
          changelog="${changelog//'%'/'%25'}"
          changelog="${changelog//$'\n'/'%0A'}"
          changelog="${changelog//$'\r'/'%0D'}"

          echo "changelog=$changelog" >> $GITHUB_OUTPUT

      - name: Make Gradlew executable
        run: chmod +x gradlew

      - name: Compile Kotlin Application
        run: ./gradlew shadowJar

      - name: Prepare Files for Packaging
        run: |
          mkdir -p package
          cp app/build/libs/mfc.jar package/
          cp LICENSE package/ || echo "LICENSE file not found"
          cp README.adoc package/ || echo "README.adoc file not found"

          # Create batch file
          echo '@echo off' > package/mfc.bat
          echo 'java -jar "%~dp0\mfc.jar" %*' >> package/mfc.bat

      - name: Verify mfc.bat File Exists
        run: |
          if [ ! -f package/mfc.bat ]; then
            echo "mfc.bat file not found!"
            exit 1
          fi

      - name: Create ZIP Archive
        run: |
          cd package
          zip -r ../mfc-${{ steps.version.outputs.version }}.zip ./*

      - name: Calculate SHA256
        id: sha
        run: |
          checksum=$(sha256sum mfc-${{ steps.version.outputs.version }}.zip | awk '{print $1}')
          echo "sha256=$checksum" >> $GITHUB_OUTPUT

      - name: Create Scoop Manifest
        run: |
          cat > mfc.json << EOF
          {
              "version": "${{ steps.version.outputs.version }}",
              "description": "A Kotlin-based conventional commit message generator",
              "homepage": "https://github.com/OmyDaGreat/mfc",
              "license": "MIT",
              "architecture": {
                  "64bit": {
                      "url": "https://github.com/OmyDaGreat/mfc/releases/download/${{ steps.version.outputs.tag }}/mfc-${{ steps.version.outputs.version }}.zip",
                      "hash": "${{ steps.sha.outputs.sha256 }}"
                  }
              },
              "bin": "mfc.bat",
              "checkver": "github",
              "autoupdate": {
                  "architecture": {
                      "64bit": {
                          "url": "https://github.com/OmyDaGreat/mfc/releases/download/v\$version/mfc-\$version.zip"
                      }
                  }
              }
          }
          EOF

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            # 🚀 Release ${{ steps.version.outputs.version }} - ${{ steps.date.outputs.date }}

            **mfc** is a multi-use general purpose terminal application!

            ## 📋 What's Changed
            ${{ steps.changelog.outputs.changelog }}

            ## 📦 Installation

            ### 🪣 Via Scoop (Windows)
            ```powershell
            scoop bucket add malefic https://github.com/OmyDaGreat/MaleficBucket
            scoop install mfc
            ```

            ### 📥 Direct Download
            Download the [mfc-${{ steps.version.outputs.version }}.zip](https://github.com/OmyDaGreat/mfc/releases/download/${{ steps.version.outputs.tag }}/mfc-${{ steps.version.outputs.version }}.zip) file from this release.

            ## 🔐 Verification

            ### 🔑 SHA256 Checksum
            ```
            ${{ steps.sha.outputs.sha256 }}
            ```

            ## 📚 Documentation
            For more information, check out the [README](https://github.com/OmyDaGreat/mfc/blob/main/README.adoc) file.

            ## 🙏 Feedback
            If you encounter any issues or have suggestions, please [open an issue](https://github.com/OmyDaGreat/mfc/issues/new) on GitHub.
          draft: false
          prerelease: false
          files: |
            mfc-${{ steps.version.outputs.version }}.zip
            mfc.json

      - name: Update Scoop Bucket
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.update_bucket != 'false' }}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          repository: OmyDaGreat/MaleficBucket
          event-type: update-mfc
          client-payload: '{"version": "${{ steps.version.outputs.version }}", "sha256": "${{ steps.sha.outputs.sha256 }}", "tag": "${{ steps.version.outputs.tag }}", "latest_commit_message": "${{ steps.commit_message.outputs.latest_commit_message }}"}'